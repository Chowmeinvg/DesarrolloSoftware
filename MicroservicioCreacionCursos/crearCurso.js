#!/usr/bin/env node
/**
 * Script para crear autom√°ticamente un curso completo basado en un t√≠tulo usando IA real
 * Conecta con OpenAI para generar el contenido del curso
 */
require('dotenv').config(); // Cargar variables de entorno
const readline = require('readline');
const mongoose = require('mongoose');
const { connectDB } = require('./utils/database');
const { Curso, Leccion, Quiz, Creador } = require('./models');
const aiService = require('./services/ai.service');

// Configurar interfaz de l√≠nea de comandos
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

/**
 * Funci√≥n principal que ejecuta el flujo completo de creaci√≥n de curso
 */
async function ejecutarCreacionCurso() {
  let session;
  
  try {
    // Verificar la API key de OpenAI
    if (!process.env.OPENAI_API_KEY) {
      console.error('\nERROR: No se encontr√≥ la API key de OpenAI en las variables de entorno.');
      console.log('Por favor, crea un archivo .env en la ra√≠z del proyecto con el siguiente contenido:');
      console.log('OPENAI_API_KEY=tu_api_key_aqui\n');
      process.exit(1);
    }

    // Conectar a la base de datos
    await connectDB();
    console.log('‚úÖ Conexi√≥n a MongoDB establecida');

    // Obtener t√≠tulo del curso del usuario
    const tituloCurso = await preguntarTituloCurso();
    console.log(`\nüìö Generando curso: "${tituloCurso}"`);
    
    // Consultar a la IA real para generar el contenido
    console.log('üß† Consultando a la IA para generar contenido...');
    console.log('‚è≥ Este proceso puede tardar unos segundos...\n');
    
    const contenidoGenerado = await aiService.generarContenidoCurso(tituloCurso);
    
    console.log('‚úÖ Contenido generado por IA exitosamente\n');
    mostrarResumenContenido(contenidoGenerado);

    // Confirmar con el usuario
    const confirmacion = await confirmarCreacion();
    if (!confirmacion) {
      console.log('‚ùå Operaci√≥n cancelada por el usuario.');
      process.exit(0);
    }

    // Iniciar sesi√≥n de transacci√≥n para garantizar consistencia
    session = await mongoose.startSession();
    session.startTransaction();
    
    // Crear documentos en la base de datos
    await crearDocumentosEnBaseDeDatos(contenidoGenerado, session);
    
    // Confirmar transacci√≥n
    await session.commitTransaction();
    session.endSession();

    console.log('\n‚úÖ ¬°Curso creado exitosamente en la base de datos!');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Error durante la creaci√≥n del curso:', error.message);
    
    // Revertir transacci√≥n si hubo error
    if (session) {
      await session.abortTransaction();
      session.endSession();
      console.log('‚Ü©Ô∏è La transacci√≥n fue revertida, no se realizaron cambios en la base de datos.');
    }
    
    process.exit(1);
  } finally {
    rl.close();
  }
}

/**
 * Solicita al usuario el t√≠tulo del curso
 * @returns {Promise<string>} T√≠tulo del curso
 */
function preguntarTituloCurso() {
  return new Promise((resolve) => {
    rl.question('üìù Ingrese el t√≠tulo del curso a generar: ', (titulo) => {
      if (!titulo || titulo.trim() === '') {
        console.log('‚ùå El t√≠tulo no puede estar vac√≠o. Por favor, intente de nuevo.');
        return preguntarTituloCurso().then(resolve);
      }
      resolve(titulo.trim());
    });
  });
}

/**
 * Solicita confirmaci√≥n al usuario para crear el curso
 * @returns {Promise<boolean>} True si confirma, false si cancela
 */
function confirmarCreacion() {
  return new Promise((resolve) => {
    rl.question('\n‚ùì ¬øDesea crear este curso en la base de datos? (s/n): ', (respuesta) => {
      const confirmado = respuesta.toLowerCase() === 's' || respuesta.toLowerCase() === 'si';
      resolve(confirmado);
    });
  });
}

/**
 * Muestra un resumen del contenido generado por la IA
 * @param {Object} contenido - Contenido generado por la IA
 */
function mostrarResumenContenido(contenido) {
  console.log('üìã RESUMEN DEL CURSO GENERADO:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  // Informaci√≥n del curso
  console.log(`üìö T√≠tulo: ${contenido.curso.titulo}`);
  console.log(`üìù Descripci√≥n: ${contenido.curso.descripcion}`);
  console.log(`‚è±Ô∏è  Duraci√≥n: ${contenido.curso.duracionHoras}`);
  console.log(`üë§ Creador: ${contenido.creador.nombre}`);
  
  // Lecciones
  console.log(`\nüìî Lecciones (${contenido.lecciones.length}):`);
  contenido.lecciones.forEach((leccion, index) => {
    console.log(`   ${index + 1}. ${leccion.titulo}`);
  });
  
  // Quizzes
  console.log(`\n‚ùì Quizzes (${contenido.quizzes.length}):`);
  contenido.quizzes.forEach((quiz, index) => {
    console.log(`   ${index + 1}. ${quiz.titulo} - ${quiz.preguntas.length} preguntas`);
  });
}

/**
 * Crea los documentos en la base de datos usando una transacci√≥n
 * @param {Object} contenido - Contenido generado por la IA
 * @param {mongoose.ClientSession} session - Sesi√≥n de MongoDB para la transacci√≥n
 * @returns {Promise<void>}
 */
async function crearDocumentosEnBaseDeDatos(contenido, session) {
  try {
    console.log('\nüîÑ Creando registros en la base de datos...');
    
    // 1. Crear o recuperar el creador
    let creador = await Creador.findOne({ nombre: contenido.creador.nombre });
    
    if (!creador) {
      console.log(`üë§ Creando nuevo creador: ${contenido.creador.nombre}`);
      creador = new Creador({
        nombre: contenido.creador.nombre,
        autenticado: contenido.creador.autenticado,
        cursos: []
      });
      await creador.save({ session });
    }
    
    // 2. Crear el curso
    console.log(`üìö Creando curso: ${contenido.curso.titulo}`);
    const curso = new Curso({
      titulo: contenido.curso.titulo,
      descripcion: contenido.curso.descripcion,
      duracionHoras: contenido.curso.duracionHoras,
      publicado: contenido.curso.publicado,
      fechaCreacion: new Date(),
      lecciones: [],
      quizzes: []
    });
    await curso.save({ session });
    
    // 3. Crear las lecciones
    console.log(`üìî Creando ${contenido.lecciones.length} lecciones...`);
    for (const [index, leccionData] of contenido.lecciones.entries()) {
      const leccion = new Leccion({
        titulo: leccionData.titulo,
        contenido: leccionData.contenido,
        curso: curso._id,
        orden: leccionData.orden || index + 1
      });
      await leccion.save({ session });
      
      // A√±adir referencia al curso
      curso.lecciones.push(leccion._id);
    }
    
    // 4. Crear los quizzes
    console.log(`‚ùì Creando ${contenido.quizzes.length} quizzes...`);
    for (const quizData of contenido.quizzes) {
      const quiz = new Quiz({
        titulo: quizData.titulo,
        preguntas: quizData.preguntas,
        respuestas: quizData.respuestas,
        calificacion: 0, // Calificaci√≥n inicial
        curso: curso._id
      });
      await quiz.save({ session });
      
      // A√±adir referencia al curso
      curso.quizzes.push(quiz._id);
    }
    
    // Actualizar el curso con las referencias a lecciones y quizzes
    await curso.save({ session });
    
    // Actualizar el creador con la referencia al nuevo curso
    creador.cursos.push(curso._id);
    await creador.save({ session });
    
    console.log('‚úÖ Todos los registros fueron creados correctamente');
  } catch (error) {
    console.error('‚ùå Error al crear los documentos:', error.message);
    throw error; // Propagar el error para que la transacci√≥n se revierta
  }
}

// Ejecutar el script
ejecutarCreacionCurso();